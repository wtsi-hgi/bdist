#!/bin/bash

# Submit a distributed job to your LSF compute cluster
# Author: Christopher Harrison <ch12@sanger.ac.uk>

# GPLv3, or later
# Copyright (c) 2016 Genome Research Ltd.

if [[ -v LSB_JOBID && -v LSB_QUEUE ]]; then
  # Rather than checking std{in,out,err} are TTYs, because of piping and
  # redirection, we only check for some LSF environment variables
  BSUBBED=1
  set +e
else
  # Interactive mode should be more picky
  set -eu -o pipefail
fi

PROGNAME=$(basename "$0")
BDIST_BIN=$(readlink -f "$0")
VERSION="0.2.3"

BDIST_ROOT="$HOME/.bdist"
BDIST_WORK="$BDIST_ROOT/work"
BDIST_LOGS="$BDIST_ROOT/logs"

usage() {
  cat <<-EOF
	Usage: $PROGNAME [-c] COMMAND [OPTIONS] (--fofn FILE | FILE ...)
	       $PROGNAME (-V | --version)
	       $PROGNAME (-h | --help)
	
	COMMAND will be run against all the specified FILEs (or a file of
	filenames, when used with --fofn), distributed across an LSF cluster.
	Use -C and/or --FOFN (i.e., uppercase) to disable thorough checking.
	
	The following bsub(1) options may also be specified and follow the same
	usage therefrom:
	
	  -G USER_GROUP
	  -J JOB_NAME
	  -M MEM_LIMIT
	  -R RESOURCE_REQ
	  -n MIN_CPUS[,MAX_CPUS]
	  -q QUEUE_NAME
	
	Note that JOB_NAME, if specified, must be a simple identifier. If not
	specified, one will be automatically created.
	EOF
}

display_version() {
  cat <<-EOF
	bdist v$VERSION
	Copyright (c) 2016 Genome Research Ltd.
	
	This program comes with ABSOLUTELY NO WARRANTY. This is free software,
	which you are welcome to redistribute under the conditions of the GNU
	Public License v3, or later.
	
	LSF(R) is a registered trademark of IBM Corporation.
	EOF
}

stderr() {
  # echo to stderr
  local message="$*"

  if [ -t 2 ]; then
    # Use ANSI red if we're in a terminal
    message="\033[0;31m${message}\033[0m"
  fi

  >&2 echo -e "$message"
}

fail_because() {
  local reason=$1

  stderr "$reason"
  usage
  exit 1
}

fail_outside_lsb() {
  if [[ ! -v BSUBBED ]]; then
    fail_because "This command must only be run within an LSF job environment"
  fi
}

random_job_name() {
  dd if=/dev/urandom bs=12 count=1 2>/dev/null \
  | base64 \
  | tr "+/" "-_"
}

init_bdist_dir() {
  mkdir -p "$BDIST_WORK"
  mkdir -p "$BDIST_LOGS"
}

get_max_job_array_size() {
  # WARNING \y is GNU Awk specific
  local default=1000

  bparams -a \
  | awk -F " *= *" '/\yMAX_JOB_ARRAY_SIZE\y/ { print $2; found = 1 }
                    END { if (!found) exit 1 }' \
  || echo $default
}

get_job_id() {
  # WARNING Uses -P for PCRE in grep
  local bsub_out="$BDIST_WORK/$1/$2"
  grep -oP "(?<=Job <)\d+(?=>)" "$bsub_out" \
  || echo "?"
}

write_log() {
  local job_name="$1"
  local log_file="$BDIST_LOGS/${job_name}.log"
  local mode="$2"
  local timestamp="$(date "+%Y/%m/%d %H:%M:%SZ%z")"
  local class
  local output

  case "$mode" in
    "submit")
      # [Element Count]
      class="SUBMIT"
      local job_id="$(get_job_id "$job_name" "_run")"
      output="Job array <${job_id}> with $3 elements"
      ;;

    "submit_cleanup")
      class="SUBMIT"
      local job_id="$(get_job_id "$job_name" "_cleanup")"
      output="Clean up job <${job_id}>"
      ;;

    "start")
      # [Job Number] [Filename]
      class="START"
      output="Job #$3 on $(hostname): $4"
      ;;

    "done")
      # [Job Number]
      class="DONE"
      output="Job #$3 completed successfully"
      ;;

    "exit")
      # [Job Number] [Exit Code]
      class="EXIT"
      output="Job #$3 exited with code $4"
      ;;
    
    "fail")
      # [Reason]
      class="FAIL"
      output="Couldn't start job: $3"
      ;;

    "clean")
      class="CLEANUP"
      output="Cleaning up"
      ;;
    
    *)
      class="UNKNOWN"
      output="${*:2}"
      ;;
  esac

  echo -e "${timestamp}\t${class}\t${output}" >> "$log_file"
}

run_command() {
  local job_name="$1"
  local work_dir="$BDIST_WORK/${job_name}"

  # Make sure the index is set
  if [[ ! -v LSB_JOBINDEX ]]; then
    write_log "$job_name" "fail" "Job index not available"
    exit 1
  fi
  
  local i="$LSB_JOBINDEX"
  local file="$(sed "${i}q;d" "$work_dir/fofn")"

  write_log "$job_name" "start" "$i" "$file"

  "$work_dir/cmd" "$file"
  local exit_code="$?"

  if [ "$exit_code" -eq "0" ]; then
    write_log "$job_name" "done" "$i"
  else
    write_log "$job_name" "exit" "$i" "$exit_code"
  fi
  exit "$exit_code"
}

cleanup() {
  local job_name="$1"
  local log_file="$BDIST_LOGS/${job_name}.log"
  local work_dir="$BDIST_WORK/${job_name}"

  write_log "$job_name" "clean"

  local ruler="$(printf "%.s=" {1..72})"
  for part in $(find "$work_dir" -name "*.part" -printf "%f\n" | sort -n); do
    local part_num="${part%.part}"
    local header="== Job #$part_num $ruler"

    { echo; echo "${header:0:72}"; echo; cat "$work_dir/$part"; } >> "$log_file"
  done
  
  rm -rf "$work_dir"
}

main() {
  local cmd
  local job_name
  local -a bsub_global
  local -a bsub_options
  local fofn
  local -a files

  [ "$#" -eq "0" ] && fail_because "No arguments provided"

  # Parse command line arguments
  while (( "$#" )); do
    case "$1" in
      "_run")
        fail_outside_lsb
        job_name="$2"
        run_command "$job_name"
        exit
        ;;

      "_cleanup")
        fail_outside_lsb
        job_name="$2"
        cleanup "$job_name"
        exit
        ;;

      "-h" | "--help")
        usage
        exit
        ;;

      "-V" | "--version")
        display_version
        exit
        ;;

      "-c" | "-C")
        cmd="${2:-}"

        if [ "$1" = "-c" ]; then
          ! command -v "${cmd%% *}" &>/dev/null && fail_because "Invalid command"
        fi

        shift
        ;;

      "--fofn" | "--FOFN")
        fofn="${2:-}"

        # Sanity check fofn
        [ ! -f "$fofn" ] && fail_because "Invalid FOFN"

        if [ "$1" = "--fofn" ]; then
          while read -r file; do
            [ ! -f "$file" ] && fail_because "FOFN contains invalid input file: \"$file\""
          done < "$fofn"
        fi

        shift
        ;;

      "-J")
        # Job name
        job_name="${2:-}"

        # Sanity check job name
        [[ ! "$job_name" =~ ^[a-zA-Z0-9._-]+$ ]] && fail_because "Invalid job name"

        shift
        ;;

      -[Gq])
        # Global bsub option passthrough
        bsub_global+=("$1" "\"${2:-}\"")
        shift
        ;;

      -[MRn])
        # Array bsub option passthrough
        bsub_options+=("$1" "\"${2:-}\"")
        shift
        ;;

      *)
        # Anything else we presume to be an input file
        [ ! -f "$1" ] && fail_because "\"$1\" is not a valid input file"
        files+=("$1")
        ;;
    esac

    shift
  done
  
  # We must have a command
  [ -z "${cmd:-}" ] && fail_because "No command specified"

  # FOFN > files, we can't have both, but we must have something
  [ -n "${fofn:-}" ] && [ "${#files[@]}" -ne "0" ] && fail_because "Please supply a FOFN or input files, not both"
  [ -z "${fofn:-}" ] && [ "${#files[@]}" -eq "0" ] && fail_because "No FOFN or input files specified"

  # Create random job name, if none specified, and create working dir
  if [ -z "${job_name:-}" ]; then
    job_name="$(random_job_name)"
  fi

  init_bdist_dir
  local work_dir="$BDIST_WORK/$job_name"
  mkdir "$work_dir"

  # If we're given explicit input files, create a FOFN from them...
  # ...otherwise, symlink the given FOFN into the working directory
  if [ -z "${fofn:-}" ]; then
    fofn="$work_dir/fofn"
    printf "%s\n" "${files[@]}" > "$fofn"
  else
    ln -s "$(readlink -f "$fofn")" "$work_dir/fofn"
    fofn="$work_dir/fofn"
  fi

  # Make sure we're not submitting too many input files (or too few)
  local file_count=$(wc -l < "$fofn")
  if [ "$file_count" -gt "$(get_max_job_array_size)" ] || [ "$file_count" -eq "0" ]; then
    cleanup "$job_name"

    if [ "$file_count" -eq "0" ]; then
      fail_because "No input files to process"
    else
      fail_because "Too many input files to process"
    fi
  fi

  # Write command script
  local cmd_script="$work_dir/cmd"
  echo "#!/bin/bash" > "$cmd_script"
  if [[ ! "$cmd" =~ "{}" ]]; then
    cmd="$cmd {}"
  fi
  sed "s#{}#\"\$*\"#g" <<< "$cmd" >> "$cmd_script"
  chmod +x "$cmd_script"

  # Submit the job array
  echo -n "Submitting job array \"$job_name\" with $file_count elements... "
  if bsub -J "${job_name}[1-${file_count}]" \
          -o "$work_dir/%I.part" \
          "${bsub_global[@]:-}" \
          "${bsub_options[@]:-}" \
          "$BDIST_BIN _run \"$job_name\"" &>"$work_dir/_run"
  then
    write_log "$job_name" "submit" "$file_count"
    echo "Done!"
  else
    echo "Failed!"
    cleanup "$job_name"
    exit 1
  fi

  # Submit the clean up job
  echo -n "Submitting clean up job... "
  if bsub -J "cleanup_${job_name}" \
          -w "ended(${job_name})" \
          -o /dev/null \
          "${bsub_global[@]:-}" \
          "$BDIST_BIN _cleanup \"$job_name\"" \
          &>"$work_dir/_cleanup"
  then
    write_log "$job_name" "submit_cleanup"
    echo "Done!"
  else
    echo "Failed!"
    stderr "Looks like you're cleaning things up manually..."
    exit 1
  fi
}

main "$@"
